# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SoDE9qu9EIOljxIIa2SKyIdPUWnox3Mi
"""

# 단계 1: 폰트 설치
import matplotlib.font_manager as fm

!apt-get -qq -y install fonts-nanum > /dev/null
#fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'

#font = fm.FontProperties(fname=fontpath, size=9)

#fm._rebuild()



fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

# 단계 2: 런타임 재시작
import os
os.kill(os.getpid(), 9)

# 단계 3: 한글 폰트 설정
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm

# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False

# 한글 폰트 설정
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

import pandas as pd
df=pd.read_csv('/content/행정동별 대중 교통 승객수 조회 통계 .csv')
df.head()

import matplotlib.pyplot as plt
import seaborn as sns

# 'wholeValue' 열에서 가장 많은 값 가지는 상위 20개의 행 선택
top_20 = df.nlargest(20, 'wholeValue')

# 상위 20개의 데이터를 이용하여 시각화
plt.figure(figsize=(12, 8))
sns.barplot(data=top_20, x='wholeValue', y='dongName', palette='viridis')
plt.title('Top 20 행정동별 대중 교통 데이터')
plt.xlabel('일일 평균 승객 수')
plt.ylabel('행정동 이름')
plt.show()

import seaborn as sns
time_columns = df.columns[3:27]

# 특정 동 이름의 데이터 선택
selected_dong = '부평구 부평1동'
selected_data = df[df['dongName'] == selected_dong]

# 시간에 따른 데이터 시각화
plt.figure(figsize=(10, 8))  # 그래프의 전체 크기를 조절
plt.barh(time_columns, selected_data[time_columns].values.flatten(), color='skyblue')
plt.title(f'{selected_dong}')
plt.xlabel('승객수')
plt.ylabel('시간')

import seaborn as sns
time_columns = df.columns[3:27]

# 특정 동 이름의 데이터 선택
selected_dong = '중구 운서동'
selected_data = df[df['dongName'] == selected_dong]

# 시간에 따른 데이터 시각화
plt.figure(figsize=(10, 8))  # 그래프의 전체 크기를 조절
plt.barh(time_columns, selected_data[time_columns].values.flatten(), color='red')
plt.title(f'{selected_dong}')
plt.xlabel('승객수')
plt.ylabel('시간')

import pandas as pd
df=pd.read_csv('/content/다양한 환승 이용 통계.csv')
df

import pandas as pd
df=pd.read_csv('/content/다양한 환승 이용 통계.csv')
df = df[['patternContent','normalPsgCnt','childPsgCnt','teenPsgCnt','collegePsgCnt','seniorPsgCnt','disabledPsgCnt']]
df.columns = ['환승유형','일반승객', '어린이승객', '청소년승객', '대학생승객', '경로우대승객', '장애인승객']

df.head()

# '①[버스]'에 해당하는 데이터만 추출
bus_data = df[df['환승유형'] == '①[버스]']

# 시각화
plt.figure(figsize=(15, 6))
bars = plt.bar(bus_data.columns[1:], bus_data.iloc[0, 1:])
plt.title('①[버스]의 각 승객 유형별 수')
plt.xlabel('승객 유형')
plt.ylabel('승객 수')

# 각 막대에 값 라벨과 값 레이블 추가
for bar, value in zip(bars, bus_data.iloc[0, 1:]):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.1, bar.get_height() + 50, str(value), ha='center', color='black', fontweight='bold')

plt.show()

# '①[버스] → ②[버스]'에 해당하는 데이터만 추출
transit_data = df[df['환승유형'] == '①[버스] → ②[버스]']

# 시각화
plt.figure(figsize=(10, 6))
bars = plt.bar(transit_data.columns[1:], transit_data.iloc[0, 1:])
plt.title('①[버스] → ②[버스]의 각 승객 유형별 수')
plt.xlabel('승객 유형')
plt.ylabel('승객 수')

# 각 막대에 값 라벨과 값 레이블 추가
for bar, value in zip(bars, transit_data.iloc[0, 1:]):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.1, bar.get_height() + 50, str(value), ha='center', color='black', fontweight='bold')

plt.show()

# '①[지하철]'에 해당하는 데이터만 추출
subway_data = df[df['환승유형'] == '①[지하철]']

# 시각화
plt.figure(figsize=(15, 6))
bars = plt.bar(subway_data.columns[1:], subway_data.iloc[0, 1:])
plt.title('①[지하철]의 각 승객 유형별 수')
plt.xlabel('승객 유형')
plt.ylabel('승객 수')

# 각 막대에 값 라벨과 값 레이블 추가
for bar, value in zip(bars, subway_data.iloc[0, 1:]):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.1, bar.get_height() + 50, str(value), ha='center', color='black', fontweight='bold')

plt.show()

# '①[지하철]'에 해당하는 데이터만 추출
subwaybus_data = df[df['환승유형'] == '①[지하철] → ②[버스]']

# 시각화
plt.figure(figsize=(15, 6))
bars = plt.bar(subwaybus_data.columns[1:], subwaybus_data.iloc[0, 1:])
plt.title('①[지하철] → ②[버스]의 각 승객 유형별 수')
plt.xlabel('승객 유형')
plt.ylabel('승객 수')

# 각 막대에 값 라벨과 값 레이블 추가
for bar, value in zip(bars, subwaybus_data.iloc[0, 1:]):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.1, bar.get_height() + 50, str(value), ha='center', color='black', fontweight='bold')

plt.show()

import pandas as pd
df=pd.read_csv('/content/택시를 탈때 가장 많이 타는 지역 또는 가장 많이 내리는 지역들.csv')
df.head(20)

import matplotlib.pyplot as plt
import seaborn as sns

# 'rideDongName'을 기준으로 그룹화하고 'cnt' 열의 합계 계산
grouped_df = df.groupby('rideDongName')['cnt'].sum().reset_index()

# 'cnt' 열에서 가장 많은 값을 가지는 상위 20개의 행 선택
top_20 = grouped_df.nlargest(20, 'cnt')
top_20.head()

# 'rideDongName'을 기준으로 그룹화하고 'cnt' 열의 합계 계산
grouped_df = df.groupby('rideDongName')['cnt'].sum().reset_index()

# 'cnt' 열에서 가장 많은 값을 가지는 상위 20개의 행 선택
top_20 = grouped_df.nlargest(20, 'cnt')

# 상위 20개의 데이터를 이용하여 시각화
plt.figure(figsize=(12, 8))
sns.barplot(data=top_20, x='cnt', y='rideDongName', palette='viridis')
plt.title('Top 20 택시 데이터')
plt.xlabel('일일 평균 승객 수')
plt.ylabel('행정동 이름')
plt.show()

import pandas as pd
df=pd.read_csv('/content/택시들이 많이 다니는 집중되는 지역 통계.csv')
df.head(20)

import matplotlib.pyplot as plt
import seaborn as sns

# 'dongName'을 기준으로 그룹화하고 'wholeCase' 열의 합계 계산
grouped_df = df.groupby('dongName')['wholeCase'].sum().reset_index()

# 'wholeCase' 열에서 가장 많은 값을 가지는 상위 20개의 행 선택
top_20_1 = grouped_df.nlargest(20, 'wholeCase')
# 상위 20개의 데이터를 이용하여 시각화
import matplotlib.pyplot as plt
import seaborn as sns

# 'dongName'을 기준으로 그룹화하고 'WholeCase' 열의 합계 계산
grouped_df = df.groupby('dongName')['wholeCase'].sum().reset_index()

# 'WholeCase' 열에서 가장 많은 값을 가지는 상위 20개의 행 선택
top_20_1 = grouped_df.nlargest(20, 'wholeCase')

# 상위 20개의 데이터를 이용하여 시각화
plt.figure(figsize=(12, 8))
sns.barplot(data=top_20_1, x='wholeCase', y='dongName', palette='viridis')
plt.title('Top 20 택시 데이터')
plt.xlabel('일일 평균 택시 이동 수')
plt.ylabel('행정동 이름')
plt.show()